import streamlit as st

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Relat√≥rio T√©cnico: Python",
    page_icon="üêç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado para melhorar a apar√™ncia
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #306998;
        text-align: center;
        margin-bottom: 2rem;
    }
    .sub-header {
        font-size: 2rem;
        color: #FFD43B;
        border-bottom: 2px solid #4B8BBE;
        padding-bottom: 0.5rem;
        margin-top: 2rem;
        margin-bottom: 1rem;
    }
    .highlight {
        background-color: #f1f1f1;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #4B8BBE;
        margin: 1rem 0;
    }
    .footer {
        text-align: center;
        margin-top: 3rem;
        color: #666;
        font-size: 0.9rem;
    }
</style>
""", unsafe_allow_html=True)

# Menu de navega√ß√£o na sidebar
st.sidebar.title("Navega√ß√£o")
section = st.sidebar.radio(
    "Selecione uma se√ß√£o:",
    ["Introdu√ß√£o", "Hist√≥rico", "Paradigmas", "Caracter√≠sticas", "Linguagens Relacionadas", "Conclus√£o", "Bibliografia"]
)

# Conte√∫do da Introdu√ß√£o
if section == "Introdu√ß√£o":
    st.markdown('<h1 class="main-header">Relat√≥rio T√©cnico: A Linguagem de Programa√ß√£o Python</h1>', unsafe_allow_html=True)
    
    st.markdown("""
    <div style="text-align: center; margin-bottom: 2rem;">
        <strong>Data:</strong> 22 de Agosto de 2025 | 
        <strong>Status:</strong>Em Desenvolvimento
        <strong>Criado e adaptado por:</strong> Gabriel da Silva Cassino 
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <div class="highlight">
    <h3>Sum√°rio Executivo</h3>
    <p>Python √© uma linguagem de programa√ß√£o de alto n√≠vel, interpretada, de prop√≥sito geral e multiparadigma. 
    Criada por Guido van Rossum no final dos anos 1980, sua filosofia de design enfatiza a legibilidade do c√≥digo, 
    a simplicidade e a produtividade do desenvolvedor. Este relat√≥rio detalha a hist√≥ria e genealogia de Python, 
    seus paradigmas de programa√ß√£o, suas caracter√≠sticas mais marcantes e faz um paralelo com linguagens relacionadas, 
    sejam elas influenciadoras, influenciadas ou concorrentes. O documento conclui que o sucesso duradouro de Python 
    √© diretamente atribu√≠vel √† sua combina√ß√£o √∫nica de facilidade de aprendizado, poder e um ecossistema comunit√°rio vibrante.</p>
    </div>
    """, unsafe_allow_html=True)

# Conte√∫do do Hist√≥rico
elif section == "Hist√≥rico":
    st.markdown('<h1 class="main-header">Hist√≥rico, Cronologia e Genealogia</h1>', unsafe_allow_html=True)
    
    st.markdown("""
    <div class="highlight">
    <h3>Origens e Motiva√ß√£o (d√©cada de 1980)</h3>
    <p>No final dos anos 1980, Guido van Rossum trabalhava no Centrum Wiskunde & Informatica (CWI), na Holanda, 
    no projeto Amoeba, um sistema operacional distribu√≠do. Ele precisava de uma linguagem de script que fosse mais 
    poderosa e leg√≠vel do que a shell script da √©poca, mas mais f√°cil e √°gil do que C.</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown('<h3 class="sub-header">Cronologia e Marcos Principais</h3>', unsafe_allow_html=True)
    
    timeline_data = {
        "1991 (v0.9.0)": "Primeira release p√∫blica. J√° inclu√≠a classes com heran√ßa, tratamento de exce√ß√µes, fun√ß√µes e os tipos de dados fundamentais.",
        "1994 (v1.0)": "Introdu√ß√£o de ferramentas de programa√ß√£o funcional como lambda, map(), filter(), e reduce().",
        "2000 (v2.0)": "Introdu√ß√£o do garbage collector e do conceito de 'list comprehensions'.",
        "2008 (v3.0)": "Lan√ßamento do Python 3, uma revis√£o major e n√£o backward-compatible da linguagem.",
        "Atualmente (v3.10+)": "O desenvolvimento de Python continua ativo, com lan√ßamentos anuais."
    }
    
    for year, description in timeline_data.items():
        st.markdown(f"**{year}**: {description}")
    
    st.markdown('<h3 class="sub-header">Genealogia</h3>', unsafe_allow_html=True)
    st.markdown("""
    Python √© uma linguagem que bebeu de v√°rias fontes. Sua genealogia pode ser resumida como:
    - **ABC:** A maior influ√™ncia. Forneceu a sintaxe de indenta√ß√£o e a filosofia de acessibilidade.
    - **Modula-3:** Influenciou o sistema de m√≥dulos e namespaces de Python.
    - **C:** A sintaxe para exce√ß√µes e alguns aspectos de sua sem√¢ntica.
    - **Lisp, Haskell:** Influenciaram as ferramentas de programa√ß√£o funcional.
    - **Java e C#:** Influenciaram a sintaxe para decoradores.
    """)

# Conte√∫do dos Paradigmas
elif section == "Paradigmas":
    st.markdown('<h1 class="main-header">Paradigmas da Linguagem</h1>', unsafe_allow_html=True)
    st.markdown("Python √© uma linguagem **multiparadigma**. Isso significa que ela n√£o for√ßa o programador a usar um √∫nico estilo de programa√ß√£o, permitindo a escolha do paradigma mais adequado para resolver um determinado problema.")
    
    st.markdown('<h3 class="sub-header">Programa√ß√£o Imperativa e Procedural</h3>', unsafe_allow_html=True)
    st.markdown("√â o estilo mais b√°sico e o que mais se assemelha a scripts sequenciais. O c√≥digo √© uma sequ√™ncia de comandos que alteram o estado do programa.")
    
    st.code("""
# Exemplo de programa√ß√£o procedural em Python
def calcular_media(numeros):
    total = 0
    count = 0
    for num in numeros:
        total += num
        count += 1
    return total / count
    """, language="python")
    
    st.markdown('<h3 class="sub-header">Programa√ß√£o Orientada a Objetos (OOP)</h3>', unsafe_allow_html=True)
    st.markdown("Python √© uma linguagem profundamente orientada a objetos. *Tudo em Python √© um objeto*, incluindo classes, fun√ß√µes e m√≥dulos.")
    
    st.code("""
# Exemplo de OOP em Python
class Animal:
    def __init__(self, nome):
        self.nome = nome

    def fazer_som(self):
        raise NotImplementedError("Subclasse deve implementar")

class Cachorro(Animal):
    def fazer_som(self):
        return "Woof!"

meu_pet = Cachorro("Rex")
print(meu_pet.fazer_som())  # Output: Woof!
    """, language="python")
    
    st.markdown('<h3 class="sub-header">Programa√ß√£o Funcional</h3>', unsafe_allow_html=True)
    st.markdown("Python oferece suporte a conceitos de programa√ß√£o funcional, embora n√£o seja uma linguagem puramente funcional.")
    
    st.code("""
# Programa√ß√£o Funcional com map e lambda
numeros = [1, 2, 3, 4]
quadrados = list(map(lambda x: x**2, numeros))
# Equivalente com list comprehension (mais "pyth√¥nico")
quadrados = [x**2 for x in numeros]
    """, language="python")

# Conte√∫do das Caracter√≠sticas
elif section == "Caracter√≠sticas":
    st.markdown('<h1 class="main-header">Caracter√≠sticas Mais Marcantes</h1>', unsafe_allow_html=True)
    
    characteristics = {
        "Sintaxe Clara e Leg√≠vel": "A obrigatoriedade de indenta√ß√£o para definir blocos de c√≥digo elimina chaves e keywords desnecess√°rias, resultando em um c√≥digo visualmente mais limpo e consistente.",
        "Tipagem Din√¢mica e Forte": "O tipo de uma vari√°vel √© inferido em tempo de execu√ß√£o (din√¢mica), mas o interpretador n√£o realiza convers√µes impl√≠citas de tipo que possam causar erros (forte).",
        "Interpretada e de Alto N√≠vel": "O c√≥digo-fonte √© executado por um interpretador, linha a linha, facilitando a prototipagem r√°pida e a portabilidade.",
        "Gerenciamento Autom√°tico de Mem√≥ria": "Python possui um garbage collector que automaticamente gerencia a aloca√ß√£o e libera√ß√£o de mem√≥ria.",
        "Biblioteca Padr√£o Abrangente": "Python √© distribu√≠do com uma vasta biblioteca padr√£o para uma infinidade de tarefas (princ√≠pio 'Batteries Included').",
        "Ecossistema Rico (PyPI)": "O Python Package Index (PyPI) √© um reposit√≥rio com centenas de milhares de bibliotecas de terceiros."
    }
    
    for char, desc in characteristics.items():
        st.markdown(f"### {char}")
        st.markdown(desc)
        st.markdown("---")

# Conte√∫do das Linguagens Relacionadas
elif section == "Linguagens Relacionadas":
    st.markdown('<h1 class="main-header">Linguagens Relacionadas</h1>', unsafe_allow_html=True)
    
    st.markdown('<h3 class="sub-header">Influenciadores</h3>', unsafe_allow_html=True)
    st.markdown("""
    - **ABC:** Como citado, foi a influ√™ncia mais significativa na filosofia de design e sintaxe.
    - **Modula-3:** Influenciou o sistema de m√≥dulos.
    - **C e C++:** Influenciaram a sintaxe de operadores e a implementa√ß√£o do interpretador CPython.
    - **Lisp e Haskell:** Influenciaram as features de programa√ß√£o funcional.
    """)
    
    st.markdown('<h3 class="sub-header">Influenciadas</h3>', unsafe_allow_html=True)
    st.markdown("""
    - **Ruby:** A linguagem Ruby e seu framework Rails compartilham a filosofia de produtividade e legibilidade com Python.
    - **JavaScript (Node.js):** O sucesso de Python como linguagem de script de backend influenciou a ado√ß√£o do JavaScript no servidor.
    - **Go (Golang):** A sintaxe simples e clara de Go √© compar√°vel √† de Python.
    - **Julia:** Adotou uma sintaxe leg√≠vel e similar ao Python para atrair sua grande comunidade cient√≠fica.
    """)
    
    st.markdown('<h3 class="sub-header">Similares e Concorrentes</h3>', unsafe_allow_html=True)
    st.markdown("""
    - **Perl:** Era a principal linguagem de script antes da ascens√£o do Python.
    - **Ruby:** Python e Ruby s√£o frequentemente comparadas como alternativas com filosofias diferentes.
    - **JavaScript:** Concorre diretamente com Python no backend e em aplica√ß√µes de dados.
    - **Java e C#:** Linguagens compiladas, estaticamente tipadas e verbosas.
    - **Linguagens 'Opostas' (Rust, C++):** Priorizam o controle de baixo n√≠vel e performance m√°xima sobre a simplicidade.
    """)

# Conte√∫do da Conclus√£o
elif section == "Conclus√£o":
    st.markdown('<h1 class="main-header">Conclus√£o</h1>', unsafe_allow_html=True)
    
    st.markdown("""
    <div class="highlight">
    <p>Python evoluiu de um projeto pessoal para uma das linguagens de programa√ß√£o mais populares e influentes do mundo. 
    Seu sucesso pode ser atribu√≠do a uma combina√ß√£o poderosa: uma sintaxe intuitiva e leg√≠vel que reduz o custo de 
    manuten√ß√£o do software; uma natureza multiparadigma que oferece flexibilidade ao desenvolvedor; e um ecossistema 
    inigual√°vel de bibliotecas que permite sua aplica√ß√£o em dom√≠nios t√£o diversos como automa√ß√£o web, intelig√™ncia artificial, 
    ci√™ncia de dados e desenvolvimento de jogos.</p>
    
    <p>Apesar de suas desvantagens, como a performance inferior comparada a linguagens compiladas, seus benef√≠cios em 
    produtividade e a facilidade de integra√ß√£o com c√≥digo C/C++ para otimiza√ß√µes cr√≠ticas garantem sua relev√¢ncia cont√≠nua. 
    Python n√£o √© apenas uma linguagem de programa√ß√£o; √© uma ferramenta que democratiza o ato de programar, permitindo que 
    cientistas, engenheiros, artistas e iniciantes transformem suas ideias em realidade de maneira eficiente.</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    st.markdown("""
    ### Ap√™ndice A: Exemplo de C√≥digo Python
    """)
    
    st.code("""
# Exemplo que combina v√°rios paradigmas
# Paradigma Procedural e OOP

from math import sqrt  # Import da biblioteca padr√£o

# Defini√ß√£o de uma Classe (OOP)
class Ponto:
    def __init__(self, x, y):  # Construtor
        self.x = x
        self.y = y

    def distancia_ate_origem(self):  # M√©todo
        return sqrt(self.x**2 + self.y**2)

    def __str__(self):  # M√©todo M√°gico para representa√ß√£o em string
        return f"({self.x}, {self.y})"

# Fun√ß√£o pura (conceito de Programa√ß√£o Funcional)
def calcular_distancia_entre_pontos(a, b):
    return sqrt((a.x - b.x)**2 + (a.y - b.y)**2)

# C√≥digo principal (Procedural)
if __name__ == "__main__":
    # Criando objetos
    ponto_a = Ponto(3, 4)
    ponto_b = Ponto(6, 8)

    # Usando m√©todos
    print(f"Ponto A: {ponto_a}")
    print(f"Dist√¢ncia de A at√© a origem: {ponto_a.distancia_ate_origem():.2f}")

    # Usando a fun√ß√£o
    distancia = calcular_distancia_entre_pontos(ponto_a, ponto_b)
    print(f"Dist√¢ncia entre A e B: {distancia:.2f}")

    # List Comprehension (Programa√ß√£o Funcional)
    pontos = [ponto_a, ponto_b]
    distancias_origem = [p.distancia_ate_origem() for p in pontos]
    print(f"Dist√¢ncias at√© a origem: {distancias_origem}")
    """, language="python")

# Conte√∫do da Bibliografia
elif section == "Bibliografia":
    st.markdown('<h1 class="main-header">Bibliografia</h1>', unsafe_allow_html=True)
    
    st.markdown("""
    <div class="highlight">
    <h3>Fontes Consultadas</h3>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    ### Livros
    - Lutz, M. (2013). Learning Python. O'Reilly Media.
    - Beazley, D. M. (2009). Python Essential Reference. Addison-Wesley Professional.
    - Ramalho, L. (2015). Fluent Python. O'Reilly Media.
    - Van Rossum, G., Drake, F. L., & Python Development Team. (2011). The Python Language Reference.
    
    ### Documenta√ß√£o Oficial
    - Python Software Foundation. (2023). The Python Tutorial. https://docs.python.org/3/tutorial/
    - Python Software Foundation. (2023). The Python Language Reference. https://docs.python.org/3/reference/
    - Python Software Foundation. (2023). The Python Standard Library. https://docs.python.org/3/library/
    
    ### Artigos e Publica√ß√µes Acad√™micas
    - Van Rossum, G. (1995). Python Reference Manual. CWI Report CS-R9525.
    - Van Rossum, G. (2007). A Brief Timeline of Python. The History of Python Blog.
    - Prechelt, L. (2000). An empirical comparison of C, C++, Java, Perl, Python, Rexx, and Tcl. IEEE Computer, 33(10), 23-29.
    
    ### Sites e Recursos Online
    - Python.org: https://www.python.org/
    - Real Python: https://realpython.com/
    - The Python Package Index (PyPI): https://pypi.org/
    - Python Wiki: https://wiki.python.org/moin/
    - Stack Overflow: https://stackoverflow.com/questions/tagged/python
    - GitHub Python Trending Repositories: https://github.com/trending/python
    
    ### V√≠deos e Palestras
    - Van Rossum, G. (2016). The History of Python. PyCon 2016.
    - Warsaw, B. (2018). How Python Was Shaped by leaky internals. PyCon 2018.
    - Beazley, D. (2015). Python Concurrency From the Ground Up. PyCon 2015.
    </div>
    """)

# Rodap√©
st.markdown("""
<div class="footer">
    <p>Relat√≥rio T√©cnico: A Linguagem de Programa√ß√£o Python - Desenvolvido com Streamlit</p>
</div>
""", unsafe_allow_html=True)
